spring.application.name=orderService
#If we create multiple instance we should not hardcode the port values spring should be able to pick it randomly
server.port=8082
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=Surendra
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update

#TO generate the correct SQL statements
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


#Actuator is for checking different health metrics
management.health.circuitbreakers.enabled=true
#It exposes all the actuator end points not just the health metrics endpoints
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.server.port=9001

#Resilience4j properties
#Here the inventory is the name of the circuit breaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
#If threshold rate is more then it will take more time for breaker to open if it is 100 then all request should befailed

resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
logging.level.io.github.resilience4j.circuitbreaker=DEBUG

#Timeout properties
inventory is the name of the time limiter
resilience4j.timelimiter.instances.inventory.time-duration=10s

#Resilience4j Retry Properties
#Failed request will be retried 3 times with a time gap of 5 sec between them before throwing error to circuit breakr
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#Zipkin and Sleuth Propertiesmanagement.
zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#1.0 means it tacks and traces all the requests.
management.tracing.sampling.probability=1.0




#Kafka Properties
#We have Kafka broker server running locally
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.value.default.type=com.ecommerce.orderService.events.OrderPlacedEvent
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ecommerce.orderService.events.OrderPlacedEvent



